// === EDGE SENSOR MOTOR TEST WITH DIRECTIONAL RESPONSE ===

#include <CytronMotorDriver.h>

#define EDGE_LEFT    11
#define EDGE_BACK    12
#define EDGE_RIGHT   13
#define START_BUTTON 10  // Active LOW

// Motor Pins (PWM_DIR mode)
CytronMD motorL(PWM_DIR, 5, 4);
CytronMD motorR(PWM_DIR, 6, 7);

const int EDGE_TRIGGER = LOW; // QTR output LOW = edge
const int TURN_SPEED   = 100; // speed for turning
const int FORWARD_SPEED = 100; // speed for moving forward
const int ACTION_TIME  = 300; // ms duration of each action

void setup() {
  Serial.begin(9600);

  pinMode(EDGE_LEFT, INPUT_PULLUP);
  pinMode(EDGE_BACK, INPUT_PULLUP);
  pinMode(EDGE_RIGHT, INPUT_PULLUP);
  pinMode(START_BUTTON, INPUT_PULLUP);

  motorL.setSpeed(0);
  motorR.setSpeed(0);

  Serial.println("=== EDGE MOTOR TEST READY ===");
  Serial.println("Press the button to start...");

  // Wait for button press to start
  while (digitalRead(START_BUTTON) == HIGH) { delay(50); }
  delay(200); // debounce
  Serial.println("Button pressed! Starting test...");
}

void loop() {
  // Read edge sensors
  bool leftEdge  = (digitalRead(EDGE_LEFT) == EDGE_TRIGGER);
  bool backEdge  = (digitalRead(EDGE_BACK) == EDGE_TRIGGER);
  bool rightEdge = (digitalRead(EDGE_RIGHT) == EDGE_TRIGGER);

  // Print sensor states
  Serial.print("Left: "); Serial.print(leftEdge ? "EDGE" : "SAFE");
  Serial.print(" | Back: "); Serial.print(backEdge ? "EDGE" : "SAFE");
  Serial.print(" | Right: "); Serial.println(rightEdge ? "EDGE" : "SAFE");

  // Respond according to edge
  if (rightEdge) {
    Serial.println("Right edge detected → turning left");
    motorL.setSpeed(-TURN_SPEED);
    motorR.setSpeed(TURN_SPEED);
    delay(ACTION_TIME);
  } else if (leftEdge) {
    Serial.println("Left edge detected → turning right");
    motorL.setSpeed(TURN_SPEED);
    motorR.setSpeed(-TURN_SPEED);
    delay(ACTION_TIME);
  } else if (backEdge) {
    Serial.println("Back edge detected → moving forward");
    motorL.setSpeed(FORWARD_SPEED);
    motorR.setSpeed(FORWARD_SPEED);
    delay(ACTION_TIME);
  } else {
    Serial.println("No edge → stopped");
  }

  // Stop motors after action
  motorL.setSpeed(0);
  motorR.setSpeed(0);

  delay(300); // small pause before next loop
}
